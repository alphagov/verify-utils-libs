plugins {
    id "org.sonarqube" version "3.4.0.2513"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
}

repositories {
    mavenCentral()
}

idea {
    project {
        // These are set to provide compatibility with the MSA and the VSP which need to stay on Java8 for services.
        // Please don't bump unless we've agreed to release the MSA and VSP with a later version.
        jdkName = '8'
        languageLevel = '8'
    }
    module {
        //if you love browsing Javadoc
        downloadJavadoc = true

        //and hate reading sources :)
        downloadSources = true
    }
}

group = "uk.gov.ida"
ext {
    build_version = "2.0.0-${System.env.BUILD_NUMBER ?: 'SNAPSHOT'}"
}
version = "$build_version"

nexusPublishing {
    useStaging = true
    repositories {
        sonatype {
            // because we registered in Sonatype after 24 Feb 2021, we provide these URIs
            // see: https://github.com/gradle-nexus/publish-plugin/blob/master/README.md
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("SONATYPE_USERNAME")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
}

subprojects {
    configurations.all {
        // These are set to provide compatibility with the MSA and the VSP which need to stay on Java8 for services.
        // Please don't bump unless we've agreed to release the MSA and VSP with a later version.
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    ext {
        build_version = "2.0.0-${System.env.BUILD_NUMBER ?: 'SNAPSHOT'}"
    }
    version = "$build_version"

    java {
        withJavadocJar()
        withSourcesJar()
    }

    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
            mavenCentral()
        }
        else {
            maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
        }
    }


    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId = 'uk.gov.ida'
                pom {
                    name = project.name
                    packaging = 'jar'
                    description = 'Library for ' + project.name
                    url = 'https://github.com/alphagov/verify-utils-libs'
                    artifactId = project.name

                    scm {
                        url = 'https://github.com/alphagov/verify-utils-libs'
                        connection = 'scm:git:git://github.com/alphagov/verify-utils-libs.git'
                        developerConnection = 'scm:git:ssh://git@github.com:alphagov/verify-utils-libs.git'
                    }

                    licenses {
                        license {
                            name = 'MIT Licence'
                            url = 'https://github.com/alphagov/verify-utils-libs/blob/master/LICENCE'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            name = 'GDS Developers'
                        }
                    }
                } // pom
            }
        }
    }

    signing {
        useInMemoryPgpKeys(
                System.getenv("MAVEN_CENTRAL_SIGNING_KEY"),
                System.getenv("MAVEN_CENTRAL_SIGNING_KEY_PASSWORD")
        )
        sign publishing.publications
    }
}


task sonar(dependsOn: [':clean', ':build', 'sonarqube'])

defaultTasks 'jar', 'publishToMavenLocal'

